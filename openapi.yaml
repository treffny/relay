openapi: 3.1.0
info:
  title: Canva Connect OAuth Relay for ChatGPT Actions
  version: 1.0.0

servers:
  - url: https://api.canva.com/rest/v1
    description: Canva Connect REST base

components:
  securitySchemes:
    oAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://RELAY_BASE_URL/api/oauth/authorize
          tokenUrl: https://RELAY_BASE_URL/api/oauth/token
          scopes:
            design:content:write: Create designs
            design:content:read: Read designs and export
            folder:read: Read folders and items
            autofill:write: Create autofill jobs
            autofill:read: Read autofill job status
  schemas: {}

security:
  - oAuth2:
      - design:content:write
      - design:content:read
      - folder:read
      - autofill:write
      - autofill:read

paths:
  /designs:
    post:
      summary: Create a new design
      operationId: createDesign
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                design_type:
                  oneOf:
                    - type: object
                      properties:
                        type:
                          type: string
                          enum: [preset]
                        name:
                          type: string
                      required: [type, name]
                    - type: object
                      properties:
                        type:
                          type: string
                          enum: [custom]
                        width:
                          type: integer
                          minimum: 40
                          maximum: 8000
                        height:
                          type: integer
                          minimum: 40
                          maximum: 8000
                      required: [type, width, height]
                asset_id:
                  type: string
                title:
                  type: string
      responses:
        '200':
          description: Design created
          content:
            application/json:
              schema:
                type: object
                properties:
                  design:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      urls:
                        type: object
                        properties:
                          edit_url:
                            type: string
                          view_url:
                            type: string

  /exports:
    post:
      summary: Create design export job
      operationId: createExport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                design_id:
                  type: string
                file_type:
                  type: string
                  enum: [pdf, jpg, png, gif, pptx, mp4]
                pages:
                  type: array
                  items:
                    type: integer
              required: [design_id, file_type]
      responses:
        '200':
          description: Export job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  export:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string

  /exports/{exportId}:
    get:
      summary: Get export job status and results
      operationId: getExport
      parameters:
        - name: exportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Export job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  export:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string
                      urls:
                        type: array
                        items:
                          type: string

  /folders/{folderId}/items:
    get:
      summary: List items in a folder
      operationId: listFolderItems
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
          description: Use root to start at the user root folder
        - name: item_types
          in: query
          schema:
            type: string
            description: Optional comma separated list for example design,folder,image
        - name: continuation
          in: query
          schema:
            type: string
            description: Continuation token returned by previous call
      responses:
        '200':
          description: Items listed
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        folder:
                          type: object
                          nullable: true
                        design:
                          type: object
                          nullable: true
                        image:
                          type: object
                          nullable: true
                  continuation:
                    type: string
                    nullable: true

  /autofills:
    post:
      summary: Create autofill job from a template
      operationId: createAutofill
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                template_id:
                  type: string
                data:
                  type: object
                  additionalProperties: true
              required: [template_id, data]
      responses:
        '200':
          description: Autofill job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  job:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string

  /autofills/{jobId}:
    get:
      summary: Get autofill job status
      operationId: getAutofill
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Autofill job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  job:
                    type: object
                    properties:
                      id:
                        type: string
                      status:
                        type: string
                      design_id:
                        type: string
